# -*- coding: utf-8 -*-
"""Proyek Analisis Data Dwi Prastiana.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oldRbi8AfvWZLOigLEyoP99UbruSxbxb

# Proyek Analisis Data: [Bike Sharing Dataset]
- **Nama:** Dwi Prastiana
- **Email:** saturdayinsaturnus@gmail.com
- **ID Dicoding:** dwi_prastiana

## Menentukan Pertanyaan Bisnis

- Pada musim apa program berbagi sepeda ini paling banyak dan paling sedikit disewa ?
- di jam berapa penyewa paling banyak ?
- Apakah cuaca mempengaruhi banyaknya perjalanan dengan sepeda ?

## Import Semua Packages/Library yang Digunakan
"""

import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

Sistem berbagi sepeda adalah generasi baru persewaan sepeda tradisional di mana seluruh proses mulai dari keanggotaan, penyewaan, dan pengembaliannya menjadi otomatis. Melalui sistem ini, pengguna dapat dengan mudah menyewa sepeda dari suatu tempat dan mengembalikannya di tempat lain. Saat ini, terdapat sekitar lebih dari 500 program berbagi sepeda di seluruh dunia yang terdiri dari
lebih dari 500 ribu sepeda. Sekarang, terdapat minat yang besar terhadap penggunaan sistem ini karena peran pentingnya dalam lalu lintas,
masalah lingkungan dan kesehatan.

Terlepas dari banyaknya minat terhadap penerapan sistem berbagi sepeda di dunia nyata, karakteristik data yang dihasilkan oleh
sistem ini membuatnya menarik untuk penelitian. Berbeda dengan layanan transportasi lain seperti bus atau kereta bawah tanah, durasi perjalanan, posisi keberangkatan dan kedatangan dicatat secara eksplisit dalam sistem ini. Fitur ini mengubah sistem berbagi sepeda menjadi
jaringan sensor virtual yang dapat digunakan untuk merasakan mobilitas dalam kota. Oleh karena itu, diharapkan banyak peristiwa yang terjadi di dalam kota dapat dideteksi melalui pemantauan data ini.

**Data Set**

Proses penyewaan sepeda memiliki hubungan yang erat dengan kondisi lingkungan dan musim. Misalnya, kondisi cuaca,
curah hujan, hari, musim, jam, dan sebagainya dapat mempengaruhi perilaku sewa. Kumpulan data ini merupakan
catatan riwayat selama dua tahun yaitu tahun 2011 dan 2012 dari Sistem Capital Bikeshare, Washington D.C., AS yang
tersedia bagi umum di http://capitalbikeshare.com/system-data. Kami mengumpulkan data setiap dua jam per hari, lalu
mengekstraksi dan menambahkan informasi cuaca dan musiman yang sesuai. Informasi cuaca diambil dari http://www.freemeteo.com.

**Data Terkait**
- Regresi : Prediksi jumlah sewa sepeda setiap jam atau harian berdasarkan keadaan lingkungan dan musim.
- Deteksi Peristiwa dan Anomali : Jumlah sepeda sewaan juga berkorelasi dengan beberapa peristiwa yang terjadi di kota yang mana mudah dilacak melalui mesin pencari. Misalnya, data pada "30-10-2012 washington d.c." di Google menampilkan hasil terkait Badai Sandy. Beberapa peristiwa penting tersebut dapat diidentifikasi. Oleh karena itu, data dapat digunakan untuk validasi algoritma deteksi anomali atau peristiwa juga.

**File**
- Readme.txt
- hour.csv : jumlah sepeda yang disewa per jam. Tercatat: 17379 jam
- day.csv : jumlah sepeda yang disewa per hari. Tercatat: 731 hari

**Karakteristik Dataset**
Kedua table hour.csv dan day.csv memuat field yang sama, kecuali data jam tidak terdapat dalam file day.csv.
- instant: record index
- dteday : tanggal
- season : musim (1:semi, 2:panas, 3:gugur, 4:dingin)
- yr : tahun (0: 2011, 1:2012)
- mnth : bulan ( 1 to 12)
- hr : jam (0 sampai 23)
- holiday : cuaca yang terjadi baik saat hari libur atau tidak  (diambil dari http://dchr.dc.gov/page/holiday-schedule)
- weekday : hari dalam 1 minggu
- workingday : jika hari libur atau weekend bernilai 1, selain itu 0.
	+ kategori cuaca :
		- 1: Cerah, Sedikit Berawan, Sebagian Berawan, Sebagian Berawan
		- 2: Sedikit Berkabut + Berawan, Sedikit Berkabut + Mendung, Sedikit Berkabut + Sedikit Berawan, Sedikit Berkabut
		- 3: Bersalju Ringan, Hujan Ringan + Petir + Awan Tersebar, Hujan Ringan + Awan Tersebar
		- 4: Hujan Lebat + Es + Petir + Berkabut, Bersalju + Berkabut
	- temp : suhu yang diukur dalam satuan Celcius. Nilai terbagi sampai dengan 41 (maksimal)
	- atemp: suhu yang dirasakan dalam satuan Celcius. Nilai terbagi sampai dengan 50 (maksimal)
	- hum: Kelembaban. Nilai terbagi sampai dengan 100 (maksimal)
	- windspeed: Kecepatan angin. Nilai terbagi sampai dengan 67 (maksimal)
	- casual: jumlah pengguna biasa
	- registered: jumlah pengguna yang teregistrasi
	- cnt: jumlah total pengguna biasa dan yang teregistrasi

**License**
Use of this dataset in publications must be cited to the following publication:
 Fanaee-T, Hadi, and Gama, Joao, "Event labeling combining ensemble detectors and background knowledge", Progress in Artificial Intelligence (2013): pp. 1-15, Springer Berlin Heidelberg, doi:10.1007/s13748-013-0040-3.

### Gathering Data
"""

hour_df = pd.read_csv('hour.csv')
hour_df.head(3)

day_df = pd.read_csv('day.csv')
day_df.head(3)

"""### Assessing Data"""

hour_df.info()
hour_df.isna().sum()
print("Jumlah duplikasi: ", hour_df.duplicated().sum())
hour_df.describe(include="all")

"""dari hasil di atas, dapat terlihat bawah tabel hour tidak memiliki missing value dan nilai yang terduplikasi."""

day_df.info()
day_df.isna().sum()
print("Jumlah duplikasi: ", day_df.duplicated().sum())
day_df.describe(include="all")

"""dari hasil di atas, dapat terlihat bawah tabel day tidak memiliki missing value dan nilai yang terduplikasi."""

print(hour_df.shape)
print(day_df.shape)

"""Dari hasil assesment didapatkan
1. Data hour terdiri dari 17379 baris dan 17 kolom, data day terdiri dari 731 baris dan  16 kolom,
2. Karakteristik data untuk variable temp, atemp, hum dan windspeed sama seperti yang telah disebutkan sebelumnya,
3. variable dteday dikonversi ke date type,
4. nilai variabel season, weekday, dan mth diubah menjadi tipe integer
5. nilai variabel yr yang berisi 0 untuk 2011 dan 1 untuk 2012 akan diubah sesuai dengan tahunnya.

### Cleaning Data
"""

import datetime
import calendar
# konversi dteday table hour variable menjadi date data type
hour_df['dteday'] = pd.to_datetime(hour_df['dteday'])
hour_df.head()

# konversi dteday table day variable menjadi date data type
day_df['dteday'] = pd.to_datetime(day_df['dteday'])
day_df.head()

"""Memperbaiki nilai dari varibale season, weekday dan mnth"""

# find the weekday of each corresponding date
hour_df['weekday'] = hour_df['dteday'].dt.day_name()
hour_df['mnth'] = hour_df['dteday'].dt.month_name()
hour_df.head(3)

# find the weekday of each corresponding date
day_df['weekday'] = day_df['dteday'].dt.day_name()
day_df['mnth'] = day_df['dteday'].dt.month_name()
day_df.head(3)

# mengubah nilai season integer menjadi nilai korespondensi
def find_season(season):
    season_string = {1:'Winter', 2:'Spring', 3:'Summer', 4:'Fall'}
    return season_string.get(season)

season_list = []

for season in hour_df['season']:
    season = find_season(season)
    season_list.append(season)

hour_df['season'] = season_list

hour_df.head(3)

# mengubah nilai season integer menjadi nilai korespondensi
def find_season(season):
    season_string = {1:'Winter', 2:'Spring', 3:'Summer', 4:'Fall'}
    return season_string.get(season)

season_list = []

for season in day_df['season']:
    season = find_season(season)
    season_list.append(season)

day_df['season'] = season_list

day_df.head(3)

hour_df['yr'] = hour_df['dteday'].dt.year
hour_df.head(3)

day_df['yr'] = day_df['dteday'].dt.year
day_df.head(3)

"""memperbaiki nilai var temp, atemp, hum dan windspeed"""

hour_df['temp'] = hour_df['temp']*41
hour_df['atemp'] = hour_df['atemp']*50
hour_df['hum'] = hour_df['hum']*100
hour_df['windspeed'] = hour_df['windspeed']*67

day_df['temp'] = day_df['temp']*41
day_df['atemp'] = day_df['atemp']*50
day_df['hum'] = day_df['hum']*100
day_df['windspeed'] = day_df['windspeed']*67

"""setelah itu data disimpan dengan nama baru agar lebih mudah digunakan"""

hour_df.to_csv("cleaned_bikesharing_hour.csv", index=False)
day_df.to_csv("cleaned_bikesharing_day.csv", index=False)

"""## Exploratory Data Analysis (EDA)"""

hour_df.dtypes

day_df.dtypes

"""### Explore ..."""

# mengekstraksi 4 variable bertipe data float
float_vars = ['temp', 'atemp', 'hum', 'windspeed']
df_float = hour_df[float_vars]

df_float.describe()

# membuat gambar dan 4 subplot
fig, axs = plt.subplots(1, 4, figsize=(15, 5))

# mengiterasi variable bertipe float dan membuat boxplot untuk masing-masing
for i, ax in enumerate(axs):
    sns.boxplot(y=df_float[float_vars[i]], orient='v', ax=ax, color='blue')

    # memberi judul dan label
    ax.set_title(float_vars[i])
    ax.set_ylabel("")

# merapikan layout plot
plt.tight_layout()

# Show the plot
plt.show()

# membuat gambar dengan 2 subplot
fig, axs = plt.subplots(1, 2, figsize=(15, 5))


sns.histplot(hour_df['cnt'], kde=True, bins=20, ax = axs[0], color='blue')
axs[0].set_title("jumlah penggunaan berbagi sepeda histogram")
axs[0].set_xlabel("")
axs[0].set_ylabel("")

sns.boxplot(y=hour_df['cnt'], ax = axs[1], color='blue')
axs[1].set_title("jumlah penggunaan berbagi sepeda boxplot")
axs[1].set_xlabel("")
axs[1].set_ylabel("")


# merapikan layout dengan subplot
plt.tight_layout()

# Show the plot
plt.show()

# membuat gambar dan 4 subplot
fig, axs = plt.subplots(1, 4, figsize=(15,5))

# iterasi dengan variable bertipe float dan membuat diagram histogramnya masing-masing
for i, ax in enumerate(axs):
    sns.histplot(x=df_float[float_vars[i]], ax=ax, kde=True, bins=10, color='blue')

    # judul dan label
    ax.set_title(float_vars[i])
    ax.set_xlabel("")
    ax.set_ylabel("")

# merapikan layout subplot
plt.tight_layout()

plt.show()

"""- grafik histogram temp, atemp, dan hum menunjukkan distribusi normal, kecuali untuk windspeed right-skewed.
- grafik boxplot temp, atemp, and hum tidak ada outliers, kecuali windspeed outliers akan diobservasi.
- grafik histogram untuk jumlah jika perjalanan berbagi sepeda adalah right-skewed. terdapat oulier di dalam boxplot.
- meskipun terdapat outliers dalam variabel windspeed, dapat terlihat nilai maximum mencapai 57 mph, and ini bukan anomali and mungkin terjadi dalam kehidupan nyata. jadi saya tidak menghapusnya.
- sama seperti windspeed, outliers tidak akan dihapus ketika terjadi puncak penggunaan berbagi sepeda.
"""

registered_sum = hour_df['registered'].sum()
casual_sum = hour_df['casual'].sum()

plt.figure(figsize=(16,6))

# bar chart dengan plt.bar
sns.barplot(x=["Registrasi", "Biasa"], y=[registered_sum, casual_sum],  palette=["blue", "lightblue"])

# label dan judul pada plot
plt.xlabel("Tipe Pengguna")
plt.ylabel("Total Perjalanan")
plt.title("Total Perjalanan teregistrasi dan biasa")

# Show the plot
plt.show()

print(f"Jumlah pengguna yang teregistrasi: {registered_sum}")
print(f"Jumlah pengguna biasa: {casual_sum}")

"""Jumlah pengguna teregistrasi lebih banyak dari pengguna biasa."""

plt.figure(figsize=(16,6))

# grafik garis dengan sns.lineplot() function
sns.lineplot(x="dteday", y="cnt", data=hour_df, color='blue')

# label dan judul plot
plt.xlabel("Tanggal")
plt.ylabel("Jumlah")
plt.title("Jumlah pengguna berbagi sepeda setiap hari")

# Show the plot
plt.tight_layout()
plt.show()

"""Jumlah perjalanan awalnya rendah di awal tahun 2011 dan 2012, namun mengalami peningkatan di pertengahan tahun dan kemudian berkurang menjelang akhir tahun.
Jumlah pengguna tahun 2012 terlihat lebih banyak dari pada tahun 2011.

Boxplot Pengguna berbagi sepeda berdasarkan tipe
"""

plt.figure(figsize=(10,6))

sns.boxplot(data=hour_df[['cnt', 'casual', 'registered']])

# label dan judul plot
plt.ylabel("Total Perajalanan")
plt.title("Jumlah berdasarkan tipe")

# Show the plot
plt.show()

"""Boxplot pengguna berbagi sepeda per tahun"""

plt.figure(figsize=(8,6))

# membuat boxplot menggunakan sns.boxplot() function
sns.boxplot(
    x="yr",
    y="cnt",
    data=hour_df,
    palette=["blue", "lightblue"]
)

# judul dan label pada plot
plt.xlabel("Tahun")
plt.ylabel("Total Perjalanan")
plt.title("Total per Tahun")

# Show the plot
plt.show()

"""Boxplots pengguna berdasarkan musim"""

plt.figure(figsize=(16,6))

# membuat boxplot menggunakan sns.boxplot() function
sns.boxplot(
    x="season",
    y="cnt",
    data=hour_df,
    palette=["blue", "lightblue"]
)

# label dan judul plot
plt.xlabel("Musim")
plt.ylabel("Total Perjalanan")
plt.title("Jumlah pengguna berbagi sepeda berdasarkan Musim")

# Show the plot
plt.show()

"""Jumlah perjalanan berbagi sepeda paling sedikit pada musim dingin dan paling tinggi di musim panas.

Grafik Boxplots bagi pengguna sepeda berdasarkan bulan
"""

plt.figure(figsize=(16,6))

# grafik boxplot menggunakan sns.boxplot() function
sns.boxplot(
    x="mnth",
    y="cnt",
    data=hour_df,
    palette=["blue", "lightblue"]
)

# label dan judul plot
plt.xlabel("Bulan")
plt.ylabel("Total Perjalanan")
plt.title("Jumlah Perjalanan sepeda berdasarkan Bulan")

# Show the plot
plt.show()

"""Seperti pada grafik garis sebelumnya dan diperjelas dengan boxplot, jumlah perjalanan sepeda cenderung meningkat di pertengahan tahun , dan menurun di awal tahun (January dan February) dan di akhir tahun (November dan December)

Boxplots Pengguna Berbagi sepeda per minggu
"""

#urutan hari
day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

plt.figure(figsize=(16,6))

# membuat boxplot menggunakan sns.boxplot() function
sns.boxplot(
    x="weekday",
    y="cnt",
    data=hour_df,
    palette=["blue", "lightblue"],
    order=day_order
)

# Label dan Judul
plt.xlabel("Weekday")
plt.ylabel("Total Perjalanan")
plt.title("Total Perjalanan sepeda per Minggu")

# Show the plot
plt.show()

"""Boxplots menunjukkan hasil yang serupa pada weekday.
Tidak ada outlier pada hari Sabtu atau Minggu yg signifikan.

Boxplots pengguna sepeda berdasarkan jam
"""

plt.figure(figsize=(16,6))

# boxplot menggunakan sns.boxplot() function
sns.boxplot(
    x="hr",
    y="cnt",
    data=hour_df,
    palette=["blue", "lightblue"]
)

# judul dan label plot
plt.xlabel("Jam")
plt.ylabel("Total Perjalanan")
plt.title("Jumlah perjalanan sepeda berdasarkan Jam")

# Show the plot
plt.show()

"""Dari tengah malam higga subuh, jumlah penggunaan terkecil.
Meningkat di pagi hari,dan puncaknya pda pukul 8.00
Kemudian menurun lagi setelahnya, namun mulai pukul 16.00 mengalami peningkatan dan puncaknya pada pukul 17.00
Setelahnya berkurang hari sepanjang malam

Boxplots untuk pengguna sepeda berdasarkan hari libur
"""

plt.figure(figsize=(8,6))

# membuat boxplot menggunakan sns.boxplot() function
sns.boxplot(
    x="holiday",
    y="cnt",
    data=hour_df,
    palette=["blue", "lightblue"]
)

# Lable dan Judul plot
plt.xlabel("Hari Libur")
plt.ylabel("Total Perjalanan")
plt.title("Total Perjalanan pada hari libur")

# Show the plot
plt.show()

print('Total Pengguna sepeda berdasarkan hari libur:')
print(hour_df['holiday'].value_counts())

"""Jumlah perjalanan sepeda pada hari biasa lebih banyak dari pada hari libur, dapat dimengerti karena jumlah hari libur lebih sedikit dari pada hari biasa.

Boxplot pengguna sepeda di hari kerja
"""

plt.figure(figsize=(8,6))

# boxplot menggunakan sns.boxplot() function
sns.boxplot(
    x="workingday",
    y="cnt",
    data=hour_df,
    palette=["blue", "lightblue"]
)

# Judul dan label plot
plt.xlabel("Hari Kerja")
plt.ylabel("Total Perjalanan")
plt.title("Total berdasarkan hari kerja")

# Show the plot
plt.show()

print('Jumlah pengguna berdasarkan hari kerja :')
print(hour_df['workingday'].value_counts())

"""Jumlah perjalanan saat hari kerja lebih banyak daripada hari libur, karena hari kerja lebih banyak dari pada hari libur

Scatterplot untuk temperature, feeling temperature, humidity dan windspeed vs. jumlah pengguna sepeda
"""

# mengektraksi varibale untuk scatterplot
scatter_vars = ['cnt', 'temp', 'atemp', 'hum', 'windspeed']
df_scatter = hour_df[scatter_vars]

df_scatter.head(3)

# membuat gambar dengan 2x2 subplots
fig, axs = plt.subplots(2, 2, figsize=(16, 10))

# iterasi variabel lainnya dan membuat scatterplot untuk masing-masing
for i, col in enumerate(hour_df.columns[10:14]):
    sns.scatterplot(x=col, y='cnt', data=hour_df, ax=axs[i // 2, i % 2], color='blue')
    axs[i // 2, i % 2].set_title(f'cnt vs {col}')

# layout subplot
plt.tight_layout()

# Show the plot
plt.show()

"""grafik scatter plot cnt vs. temp and cnt vs. atemp menunjukkan bahwa perjalanan meningkat ketika suhu meningkat. Ini seperti ada hubungan antara suhu dengan jumlah perjalanan.
The scatter plot of hum vs. cnt tidak menunjukkan korelasi.
The scatter plot of cnt vs. windspeed menunjukkan bahwa jumlah perjalanan berkurang saan kecepatan angin meningkat.

Correlation dan Correlation Heat Map
"""

hour_df.corr(numeric_only=True)

plt.figure(figsize=(16, 10))
sns.heatmap(hour_df.corr(numeric_only=True), annot=True)

"""Terdapat korelasi yang kuat antara variabel casual dan registered vs. cnt, dapat diperkirakan karena peningkatan jumlah biasa dan yg terregistrasi akan mempengaruhi jumlah perjalanan secara langsung. Terdapat korelasi yang moderat antara hr, temp and atemp vs jumlah perjalanan sepeda.

## Visualization & Explanatory Analysis

### Pertanyaan 1:

Dimusim apa paling banyak dan paling sedikit menggunakan program berbagi sepeda ?
"""

seasonly_users_df = hour_df.groupby("season").agg({
    "casual": "sum",
    "registered": "sum",
    "cnt": "sum"
})

seasonly_users_df.head()
seasonly_users_df = seasonly_users_df.reset_index()
seasonly_users_df
season_order = ['Spring', 'Summer', 'Fall', 'Winter']

plt.figure(figsize=(10,6))
sns.barplot(x="season", y="cnt", data=seasonly_users_df, order=season_order)
plt.xlabel("Musim")
plt.ylabel("Total Total Perjalanan")
plt.title("Total pengguna berbagi sepeda berdasarkan musim")

plt.show()

"""- dapat terlihat bahwa pengguna paling banyak pada musim panas dan paling sedikit pada musim dingin

untuk melihat perbadingan antara pengendara biasa dan berbagi sepeda, unpivot terlebih dahulu seasonly_users_df
"""

seasonly_users_df_unpivoted = pd.melt(seasonly_users_df,
                                      id_vars=['season'],
                                      value_vars=['casual', 'registered'],
                                      var_name='status',
                                      value_name='count')
seasonly_users_df_unpivoted
plt.figure(figsize=(10,6))

sns.barplot(x='season', y='count', data=seasonly_users_df_unpivoted, order=season_order, hue='status')

plt.xlabel("Musim")
plt.ylabel("Total Perjalanan")
plt.title("Total Perjalanan berbagi sepeda berdasarkan Musim")

plt.show()

"""Insight
- Jumlah perjalanan sepeda tertinggi pada musim panas dan terendah pada musim dingin
- tidak ada perbedaan yang signifikan antara pengguna biasa dan teregistrasi pada semua musim, keduanya paling banyak pada musim panas dan paling sedikit pada musim dingin

### Pertanyaan 2:

Pada Jam berapa terdapat banyak pengendara sepeda ?
"""

hourly_pengguna_df = hour_df.groupby("hr").agg({
    "casual": "sum",
    "registered": "sum",
    "cnt": "sum"
})

hourly_pengguna_df.head()

hourly_pengguna_df = hourly_pengguna_df.reset_index()
hourly_pengguna_df.head()

plt.figure(figsize=(16,6))

# grafik garis sns.lineplot() function
sns.lineplot(x="hr", y="casual", data=hourly_users_df, label='Biasa')
sns.lineplot(x="hr", y="registered", data=hourly_users_df, label='Teregistrasi')

# label dan judul plot
x = np.arange(0, 24, 1)
plt.xticks(x)

plt.xlabel("Jam")
plt.ylabel("Total Perjalanan")
plt.title("Jumlah Perjalanan Sepeda berdasarkan Jam")

# highlight data pada grafik
plt.axvline(x=8, color='pink', linestyle='--')
plt.axvline(x=17, color='pink', linestyle='--')

# legend plot
plt.legend(loc='upper right', fontsize=12)

# Show the plot
plt.tight_layout()
plt.show()

"""**Insight**
1. Dari grafik diatas menunjukkan dengan jelas perbedaan pattern bagaimana perbedaan pengendara biasa dan yang teregistrasiberdasarkan jam dalam sehari.
2. Untuk pengguna teregistrasi mengalami puncaknya pada jam 08.00 dan 17.00. Kedua jam ini seperti waktu orang-orang untuk pergi dan pulang bekerja, sangat memungkinkan sepeda ini dipergunakan untuk transportasi sampai ke stasiun atau halte terdekat.
3. Di sisi lain, pengguna sepeda biasa menunjukkan penggunaan yang hampir sama dari pagi hingga menjelang sore, kemudian menurun setelah jam 17.00.

### Pertanyaan 3:

Apakah cuaca mempengaruhi orang-orang untuk mengendarai sepeda ?

berikut ini kategori cuaca yang disebutkan di awal :
- 1: Cerah, Sedikit Berawan, Sebagian Berawan, Sebagian Berawan
- 2: Sedikit Berkabut + Berawan, Sedikit Berkabut + Mendung, Sedikit Berkabut + Sedikit Berawan, Sedikit Berkabut
- 3: Bersalju Ringan, Hujan Ringan + Petir + Awan Tersebar, Hujan Ringan + Awan Tersebar
- 4: Hujan Lebat + Es + Petir + Berkabut, Bersalju + Berkabut
"""

weatherly_pengguna_df = hour_df.groupby("weathersit").agg({
    "casual": "sum",
    "registered": "sum",
    "cnt": "sum"
})

weatherly_pengguna_df

weatherly_pengguna_df = weatherly_pengguna_df.reset_index()
weatherly_pengguna_df

plt.figure(figsize=(10,6))

sns.barplot(x="weathersit", y="cnt", data=weatherly_pengguna_df)

plt.xlabel("Cuaca")
plt.ylabel("Total Perjalanan")
plt.title("Total Perjalanan berdasarkan Cuaca")

plt.show()

plt.rcParams['figure.figsize'] = [10.0, 10.0]
sns.set_context(font_scale=0.9)

g = sns.FacetGrid(data=hour_df,
               col='season',
               row='weathersit',hue='season')
g.map(plt.hist,'cnt')

plt.subplots_adjust(top=0.9)
g.fig.suptitle('Jumlah perjalanan dengan sepeda berdasarkan kondisi Cuaca dan Musim')

g.set_xlabels('Jumlah')
g.set_ylabels('Frekuensi')

plt.show()

"""**Insight**
1. Jumlah perjalanan sepeda banyak dipengaruhi oleh kondisi cuaca. Ada perbedaan signifikan antara cuaca hujan lebat dan guntur dengan cuaca yang lebih baik.
2. Kondisi ini berlaku untuk semua musim.

## Conclusion

- Program berbagi sepeda ini paling sering ditemukan pada musim panas dan paling sedikit pada musim dingin.
- Untuk pengguna teregistrasi mengalami puncaknya pada jam 08.00 dan 17.00. Diperkirakan sepeda dipergunakan oleh pekerja sebagai sarana transportasi sampai ke stasiun atau halte terdekat.
- Untuk pengguna sepeda biasa menunjukkan penggunaan yang hampir sama dari pagi hingga menjelang sore, kemudian menurun setelah jam 17.00.
- Jumlah perjalanan lebih banyak dilakukan saat cuaca cerah daripada kondisi cuaca ekstrem.
"""

data_clean = 'data.csv'
hour_df.to_csv(data_clean, index=False)